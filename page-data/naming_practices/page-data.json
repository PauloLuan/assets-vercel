{"componentChunkName":"component---src-templates-blog-post-js","path":"/naming_practices/","result":{"data":{"site":{"siteMetadata":{"title":"Reativa Tecnologia"}},"markdownRemark":{"id":"80d7c964-97ff-58a2-926f-438c56640e82","excerpt":"Como Nomear variáveis Nomear as coisas é difícil. Então, vamos tentar tornar isso mais fácil. Embora essas sugestões possam ser aplicadas a qualquer linguagem…","html":"<hr>\n<p><a href=\"https://bit.ly/guia-dev-autodidata\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--CLh9YYaK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzwjvuf88t1axv00tm4z.png\" alt=\"Como Nomear variáveis\"></a></p>\n<hr>\n<p>Nomear as coisas é difícil. Então, vamos tentar tornar isso mais fácil.</p>\n<p>Embora essas sugestões possam ser aplicadas a qualquer linguagem de programação, usarei JavaScript para ilustrá-las na prática.</p>\n<h2>Língua Inglesa</h2>\n<p>Use o idioma inglês ao nomear suas variáveis e funções.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token comment\">/* Ruim */</span>\n<span class=\"token keyword\">const</span> primerNombre <span class=\"token operator\">=</span> <span class=\"token string\">'Gustavo'</span>\n<span class=\"token keyword\">const</span> amigos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Kate'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">/* Bom */</span>\n<span class=\"token keyword\">const</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">'Gustavo'</span>\n<span class=\"token keyword\">const</span> friends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Kate'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>Goste ou não, o inglês é a linguagem dominante na programação: a sintaxe de todas as linguagens de programação é escrita em inglês, assim como inúmeras documentações e materiais educacionais. Ao escrever seu código em inglês, você aumenta drasticamente sua coesão.</p>\n</blockquote>\n<h2>Convenção de nomes</h2>\n<p>Escolha <strong>uma</strong> convenção de nomenclatura e siga-a. Pode ser <code class=\"language-text\">camelCase</code>, ou<code class=\"language-text\">snake_case</code>, ou de qualquer outra forma, não importa. O que importa é que permaneça consistente (não misture mais de uma).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token comment\">/* Ruim */</span>\n<span class=\"token keyword\">const</span> page_count <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">const</span> shouldUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token comment\">/* Bom */</span>\n<span class=\"token keyword\">const</span> pageCount <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">const</span> shouldUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token comment\">/* Good as well */</span>\n<span class=\"token keyword\">const</span> page_count <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">const</span> should_update <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>S-I-D</h2>\n<p>A noemação deve ser <em>short</em> (pequeno), <em>intuitive</em> (intuitivo) e <em>descriptive</em> (descritivo):</p>\n<ul>\n<li><strong>Short</strong>. Um nome não deve demorar para ser digitado e, portanto, lembre-se;</li>\n<li><strong>Intuitivo</strong>. Um nome deve ser lido naturalmente, o mais próximo possível da fala comum;</li>\n<li><strong>Descritivo</strong>. Um nome deve refletir o que ele faz / possui da maneira mais eficiente;</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token comment\">/* Ruim */</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token comment\">// \"a\" pode significar qualquer coisa</span>\n<span class=\"token keyword\">const</span> isPaginatable <span class=\"token operator\">=</span> a <span class=\"token operator\">></span> <span class=\"token number\">10</span> <span class=\"token comment\">// \"Paginável\" soa extremamente artificial</span>\n<span class=\"token keyword\">const</span> shouldPaginatize <span class=\"token operator\">=</span> a <span class=\"token operator\">></span> <span class=\"token number\">10</span> <span class=\"token comment\">// Verbos inventados são muito divertidos!</span>\n\n<span class=\"token comment\">/* Bom */</span>\n<span class=\"token keyword\">const</span> postCount <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">const</span> hasPagination <span class=\"token operator\">=</span> postCount <span class=\"token operator\">></span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">const</span> shouldDisplayPagination <span class=\"token operator\">=</span> postCount <span class=\"token operator\">></span> <span class=\"token number\">10</span> <span class=\"token comment\">// alternativamente</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Evite contrações</h2>\n<p><strong>Não</strong> use contrações. Elas não contribuem para nada além da diminuição da legibilidade do código. Encontrar um nome curto e descritivo pode ser difícil, mas a contração não é uma desculpa para não fazê-lo.</p>\n<p><code class=\"language-text\"></code> `js\n/* Ruim */\nconst onItmClk = () => {}</p>\n<p>/* Bom */\nconst onItemClick = () => {}\n<code class=\"language-text\"></code> `</p>\n<h2>Evite a duplicação de contexto</h2>\n<p>Um nome não deve duplicar o contexto no qual está definido. Sempre remova o contexto de um nome, se isso não diminuir sua legibilidade.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MenuItem</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* O nome do método duplica o contexto (que é \"MenuItem\") */</span>\n  <span class=\"token function-variable function\">handleMenuItemClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/* Se lê muito melhor assim como `MenuItem.handleClick ()` */</span>\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Refletir o resultado esperado</h2>\n<p>Um nome deve refletir o resultado esperado.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token comment\">/* Ruim */</span>\n<span class=\"token keyword\">const</span> isEnabled <span class=\"token operator\">=</span> itemCount <span class=\"token operator\">></span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>isEnabled<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token comment\">/* Bom */</span>\n<span class=\"token keyword\">const</span> isDisabled <span class=\"token operator\">=</span> itemCount <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isDisabled<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<hr>\n<h1>Funções de nomenclatura</h1>\n<h2>A/HC/LC padronizar</h2>\n<p>Há um padrão útil a seguir ao nomear funções:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">prefix? + action (A) + high context (HC) + low context? (LC)\n\nprefixo? + ação (A) + contexto alto (HC) + contexto baixo? (LC)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Dê uma olhada em como esse padrão pode ser aplicado na tabela abaixo.</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Prefix</th>\n<th>Action (A)</th>\n<th>High context (HC)</th>\n<th>Low context (LC)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">getPost</code></td>\n<td></td>\n<td><code class=\"language-text\">get</code></td>\n<td><code class=\"language-text\">Post</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">getPostData</code></td>\n<td></td>\n<td><code class=\"language-text\">get</code></td>\n<td><code class=\"language-text\">Post</code></td>\n<td><code class=\"language-text\">Data</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">handleClickOutside</code></td>\n<td></td>\n<td><code class=\"language-text\">handle</code></td>\n<td><code class=\"language-text\">Click</code></td>\n<td><code class=\"language-text\">Outside</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">shouldDisplayMessage</code></td>\n<td><code class=\"language-text\">should</code></td>\n<td><code class=\"language-text\">Display</code></td>\n<td><code class=\"language-text\">Message</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>Note:</strong> A ordem do contexto afeta o significado de uma variável. Por exemplo, <code class=\"language-text\">shouldUpdateComponent</code> significa que <em>você</em> está prestes a atualizar um componente, enquanto <code class=\"language-text\">shouldComponentUpdate</code> diz que o <em>component</em> irá atualizar por si mesmo, e você está controlando quando ele deve ser atualizado.\nEm outras palavras, <strong>contexto alto enfatiza o significado de uma variável</strong>.</p>\n</blockquote>\n<h2>Actions</h2>\n<p>A parte do verbo do nome da função.A parte mais importante responsável por descrever o que a função <em>faz</em>.</p>\n<h3><code class=\"language-text\">get</code></h3>\n<p>Acessa os dados imediatamente (ou seja, abreviatura de dados internos).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getFruitCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fruits<span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>See also <a href=\"#compose\">compose</a>.</p>\n</blockquote>\n<h3><code class=\"language-text\">set</code></h3>\n<p>Define uma variável de forma declarativa, com o valor <code class=\"language-text\">A</code> para o valor<code class=\"language-text\">B</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> fruits <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setFruits</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextFruits</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fruits <span class=\"token operator\">=</span> nextFruits\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setFruits</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3><code class=\"language-text\">reset</code></h3>\n<p>Define uma variável de volta ao seu valor ou estado inicial.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> initialFruits <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">let</span> fruits <span class=\"token operator\">=</span> initialFruits\n<span class=\"token function\">setFruits</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">resetFruits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fruits <span class=\"token operator\">=</span> initialFruits\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">resetFruits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3><code class=\"language-text\">fetch</code></h3>\n<p>Solicitação de alguns dados, que leva algum tempo indeterminado (ou seja, solicitação assíncrona).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fetchPosts</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">postCount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.dev/posts'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3><code class=\"language-text\">remove</code></h3>\n<p>Removes something <em>from</em> somewhere.</p>\n<p>For example, if you have a collection of selected filters on a search page, removing one of them from the collection is <code class=\"language-text\">removeFilter</code>, <strong>not</strong> <code class=\"language-text\">deleteFilter</code> (and this is how you would naturally say it in English as well):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">removeFilter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filterName<span class=\"token punctuation\">,</span> filters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> filters<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> name <span class=\"token operator\">!==</span> filterName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> selectedFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'price'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'availability'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'size'</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">removeFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'price'</span><span class=\"token punctuation\">,</span> selectedFilters<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>Veja também a seção <a href=\"#delete\">delete</a>.</p>\n</blockquote>\n<h3><code class=\"language-text\">delete</code></h3>\n<p>Apaga COMPLETAMENTE a existência de algo.</p>\n<p>Imagine que você é um editor de conteúdo e há aquele post notório do qual deseja se livrar. Depois de clicar em um botão VERMELHO BRILHANTE “Excluir postagem”, o CMS executou uma ação <code class=\"language-text\">deletePost</code>, <strong>e não</strong> <code class=\"language-text\">removePost</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">deletePost</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> database<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>Veja também a seção <a href=\"#remove\">remove</a>.</p>\n</blockquote>\n<h3><code class=\"language-text\">compose</code></h3>\n<p>Cria novos dados a partir do existente. Principalmente aplicável a strings, objetos ou funções.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">composePageUrl</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pageName<span class=\"token punctuation\">,</span> pageId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pageName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pageId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>See also <a href=\"#get\">get</a>.</p>\n</blockquote>\n<h3><code class=\"language-text\">handle</code></h3>\n<p>Lida com uma ação. Frequentemente usado ao nomear um método de retorno de chamada.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleLinkClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Clicked a link!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nlink<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handleLinkClick<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<hr>\n<h2>Contexto</h2>\n<p>Um domínio no qual uma função opera.</p>\n<p>Uma função geralmente é uma ação em <em>algo</em>. É importante indicar qual é o seu domínio operável, ou pelo menos um tipo de dados esperado.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token comment\">/* A pure function operating with primitives */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">predicate<span class=\"token punctuation\">,</span> list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Function operating exactly on posts */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getRecentPosts</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">posts</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> post<span class=\"token punctuation\">.</span>date <span class=\"token operator\">===</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>Algumas suposições específicas do idioma podem permitir a omissão do contexto. Por exemplo, em JavaScript, é comum que <code class=\"language-text\">filter</code> opere em Array.Adicionar <code class=\"language-text\">filterArray</code> explícito seria desnecessário.</p>\n</blockquote>\n<p>—</p>\n<h2>Prefixos</h2>\n<p>Prefixo realça o significado de uma variável. Raramente é usado em nomes de funções.</p>\n<h3><code class=\"language-text\">is</code></h3>\n<p>Descreve uma característica ou estado do contexto atual (geralmente <code class=\"language-text\">booleano</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'blue'</span>\n<span class=\"token keyword\">const</span> isBlue <span class=\"token operator\">=</span> color <span class=\"token operator\">===</span> <span class=\"token string\">'blue'</span> <span class=\"token comment\">// characteristic</span>\n<span class=\"token keyword\">const</span> isPresent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// state</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isBlue <span class=\"token operator\">&amp;&amp;</span> isPresent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Blue is present!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3><code class=\"language-text\">has</code></h3>\n<p>Descreve se o contexto atual possui um certo valor ou estado (geralmente <code class=\"language-text\">booleano</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token comment\">/* Ruim */</span>\n<span class=\"token keyword\">const</span> isProductsExist <span class=\"token operator\">=</span> productsCount <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> areProductsPresent <span class=\"token operator\">=</span> productsCount <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n\n<span class=\"token comment\">/* Bom */</span>\n<span class=\"token keyword\">const</span> hasProducts <span class=\"token operator\">=</span> productsCount <span class=\"token operator\">></span> <span class=\"token number\">0</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3><code class=\"language-text\">should</code></h3>\n<p>Reflete uma declaração condicional positiva (geralmente <code class=\"language-text\">booleana</code>) associada a uma determinada ação.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">shouldUpdateUrl</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> expectedUrl</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> url <span class=\"token operator\">!==</span> expectedUrl\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3><code class=\"language-text\">min</code>/<code class=\"language-text\">max</code></h3>\n<p>Representa um valor mínimo ou máximo. Usado ao descrever limites.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Renders a random amount of posts within\n * the given min/max boundaries.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">renderPosts</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">posts<span class=\"token punctuation\">,</span> minPosts<span class=\"token punctuation\">,</span> maxPosts</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> posts<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">randomBetween</span><span class=\"token punctuation\">(</span>minPosts<span class=\"token punctuation\">,</span> maxPosts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3><code class=\"language-text\">prev</code>/<code class=\"language-text\">next</code></h3>\n<p>Indica o estado anterior ou seguinte de uma variável no contexto atual.Usado ao descrever transições de estado.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">fetchPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> prevPosts <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>posts\n\n  <span class=\"token keyword\">const</span> fetchedPosts <span class=\"token operator\">=</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> nextPosts <span class=\"token operator\">=</span> <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>prevPosts<span class=\"token punctuation\">,</span> fetchedPosts<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> posts<span class=\"token operator\">:</span> nextPosts <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Singular e Plurals</h2>\n<p>Como um prefixo, os nomes de variáveis podem ser transformados no singular ou no plural, dependendo se eles contêm um único valor ou vários valores.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token comment\">/* Ruim */</span>\n<span class=\"token keyword\">const</span> friends <span class=\"token operator\">=</span> <span class=\"token string\">'Bob'</span>\n<span class=\"token keyword\">const</span> friend <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tony'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tanya'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">/* Bom */</span>\n<span class=\"token keyword\">const</span> friend <span class=\"token operator\">=</span> <span class=\"token string\">'Bob'</span>\n<span class=\"token keyword\">const</span> friends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tony'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tanya'</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<hr>\n<p><a href=\"http://bit.ly/pauloluan-insta\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_qQqH59e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jzrvlwsqdrz7j5wgtxb.png\" alt=\"Instagram Paulo Luan\"></a></p>\n<hr>","frontmatter":{"title":"Como nomear variáveis?","date":"February 03, 2021","description":"Como nomear variáveis?"}}},"pageContext":{"slug":"/naming_practices/","previous":{"fields":{"slug":"/linux_bash_handbook/"},"frontmatter":{"title":"Linux: Apostila Completa de Bash"}},"next":{"fields":{"slug":"/linux_comandos_uteis/"},"frontmatter":{"title":"Linux: Comandos úteis (Guia de bolso)"}}}},"staticQueryHashes":["1061827086","63159454"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/linux_bash_handbook/","result":{"data":{"site":{"siteMetadata":{"title":"Reativa Tecnologia"}},"markdownRemark":{"id":"8bf905af-4292-56b7-90cc-4b0d91594d43","excerpt":"Como Vamos mergulhar nos comandos do Linux! Dica: Dê uma olhada em learnyoubash — são exercícios interativos baseados nesse documento! Instalando o guia através…","html":"<hr>\n<p><a href=\"https://bit.ly/guia-dev-autodidata\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yoCUdHry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1oq7vn2utzsxc4nui45.png\" alt=\"Como\"></a></p>\n<hr>\n<p>Vamos mergulhar nos comandos do Linux!</p>\n<blockquote>\n<p><strong>Dica</strong>: Dê uma olhada em <a href=\"https://git.io/learnyoubash\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>learnyoubash</strong></a> — são exercícios interativos baseados nesse documento!</p>\n</blockquote>\n<h1>Instalando o guia através do Node</h1>\n<p>Você pode instalar esse documento usando <code class=\"language-text\">npm</code>. Execute:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ npm install -g bash-handbook</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Você será capaz de executar <code class=\"language-text\">bash-handbook</code> na sua linha de comando.</p>\n<h1>Índice</h1>\n<ul>\n<li><a href=\"#introdu%C3%A7%C3%A3o\">Introdução</a></li>\n<li>\n<p><a href=\"#estilos-do-shell\">Estilos do shell</a></p>\n<ul>\n<li><a href=\"#modo-interativo\">Interativo</a></li>\n<li><a href=\"#modo-n%C3%A3o-interativo\">Não-interativo</a></li>\n<li><a href=\"#c%C3%B3digos-de-sa%C3%ADda\">Códigos de saída</a></li>\n</ul>\n</li>\n<li><a href=\"#coment%C3%A1rios\">Comentários</a></li>\n<li>\n<p><a href=\"#vari%C3%A1veis\">Variáveis</a></p>\n<ul>\n<li><a href=\"#vari%C3%A1veis-locais\">Variáveis locais</a></li>\n<li><a href=\"#vari%C3%A1veis-de-ambiente\">Variáveis de ambiente</a></li>\n<li><a href=\"#par%C3%A2metros-de-posi%C3%A7%C3%A3o\">Parâmetros de posição</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#expans%C3%B5es-do-shell\">Expansões do shell</a></p>\n<ul>\n<li><a href=\"#expans%C3%B5es-de-suporte\">Expansões de suporte</a></li>\n<li><a href=\"#substitui%C3%A7%C3%A3o-de-comandos\">Substituição de comandos</a></li>\n<li><a href=\"#expans%C3%B5es-aritim%C3%A9ticas\">Expansões aritiméticas</a></li>\n<li><a href=\"#aspas-simples-e-duplas\">Aspas simples e duplas</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#arrays\">Arrays</a></p>\n<ul>\n<li><a href=\"#declarando-array\">Declarando array</a></li>\n<li><a href=\"#expans%C3%B5es-de-array\">Expansões de Array</a></li>\n<li><a href=\"#separando-array\">Separando Array</a></li>\n<li><a href=\"#adicionando-elementos-no-array\">Adicionando elementos no Array</a></li>\n<li><a href=\"#deletando-elementos-de-um-array\">Deletando elementos de um Array</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#streams-pipes-e-listas\">Streams, pipes e listas</a></p>\n<ul>\n<li><a href=\"#streams\">Streams</a></li>\n<li><a href=\"#pipes\">Pipes</a></li>\n<li><a href=\"#lista-de-comando\">Lista de comandos</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#operadores-condicionais\">Operadores condicionais</a></p>\n<ul>\n<li><a href=\"#express%C3%B5es-prim%C3%A1rias-e-combina%C3%A7%C3%A3o-de-express%C3%B5es\">Expressões primárias e combinação de expressões</a></li>\n<li><a href=\"#usando-a-condicional-if\">Usando a condicional <code class=\"language-text\">if</code></a></li>\n<li><a href=\"#usando-a-condicional-case\">Usando a condicional <code class=\"language-text\">case</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#loops\">Loops</a></p>\n<ul>\n<li><a href=\"#for-loop\"><code class=\"language-text\">for</code> loop</a></li>\n<li><a href=\"#while-loop\"><code class=\"language-text\">while</code> loop</a></li>\n<li><a href=\"#until-loop\"><code class=\"language-text\">until</code> loop</a></li>\n<li><a href=\"#select-loop\"><code class=\"language-text\">select</code> loop</a></li>\n<li><a href=\"#controlando-o-loop\">Controlando o loop</a></li>\n</ul>\n</li>\n<li><a href=\"#fun%C3%A7%C3%B5es\">Funções</a></li>\n<li><a href=\"#depurando\">Depurando</a></li>\n<li><a href=\"#posf%C3%A1cio\">Posfácio</a></li>\n<li><a href=\"#license\">Licença</a></li>\n</ul>\n<h1>Introdução</h1>\n<p>Se você é um desenvolvedor, então você sabe o valor que o tempo tem. Otimizar seu processo de trabalho é um dos mais importantes aspectos do seu dia-a-dia.</p>\n<p>E, se entrarmos no caminho em direção à eficiência e produtividade, sempre esbarramos em ações que serão repetidas uma vez ou outra, como:</p>\n<ul>\n<li>tirar um <em>screenshot</em> e fazer o upload para um servidor</li>\n<li>processar texto em vários formatos</li>\n<li>converter arquivos entre diferentes formatos</li>\n<li>analisar o resultado da execução de um programa</li>\n</ul>\n<p>Entra em cena, o <strong>Bash</strong>, nosso salvador.</p>\n<p>Bash é um shell Unix escrito por <a href=\"https://en.wikipedia.org/wiki/Brian_Fox_(computer_programmer)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Brian Fox</a> no formato de software livre para o projeto GNU, com a intenção de substituir o <a href=\"https://en.wikipedia.org/wiki/Bourne_shell\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bourne shell</a>. Ele foi lançado em 1989 e tem sido distribuído como shell padrão no Linux e macOS a um longo tempo.</p>\n<!-- link this format, because some MD processors handle '()' in URLs poorly -->\n<p>E porque nós precisamos aprender algo que foi escrito a mais de 30 anos? A resposta é simples: essa <em>coisa</em>, hoje em dia, é uma das mais poderosas e portáveis ferramentas para escrever scripts para todos os sitemas baseados em Unix. E isso é a razão pela qual você deve aprender bash. Ponto.</p>\n<p>Nesse manual, eu vou descrever os conceitos mais importantes do bash através de exemplos. Eu espero que seja útil para você e que você possa aprender algo através deles.</p>\n<h1>Estilos do shell</h1>\n<p>O usuário do shell bash pode trabalhar em dois modos - interativo e não-interativo.</p>\n<h2>Modo Interativo</h2>\n<p>Se você estiver trabalhando no Ubuntu, você tem sete terminais virtuais disponíveis para você. O ambiente de trabalho se posiciona no sétimo terminal virtual. Você pode voltar para uma GUI mais amigável usando o atalho <code class=\"language-text\">Ctrl-Alt-F7</code>.</p>\n<p>Você pode abrir o shell usando o atalho <code class=\"language-text\">Ctrl-Alt-F1</code>. Depois disso, a GUI que você acostuma utilizar irá desaparecer e um dos terminais virtuais será mostrado.</p>\n<p>Se você ver algo parecido com isso, então, você está trabalhando no modo interativo:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">user@host:~$</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Aqui você pode digitar uma variedade de comandos Unix, como <code class=\"language-text\">ls</code>, <code class=\"language-text\">grep</code>, <code class=\"language-text\">cd</code>, <code class=\"language-text\">mkdir</code>, <code class=\"language-text\">rm</code> e ver o resultado das suas execuções.</p>\n<p>Chamamos isso de shell interativo porque ele interage diretamente com o usuário.</p>\n<p>Usar um terminal virtual, nem sempre é conveniente. Por exemplo, se você quiser editar um documento e executar um comando ao mesmo tempo, é melhor você usar um emulador de terminais virtuais, como:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/GNOME_Terminal\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GNOME Terminal</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Terminator_(terminal_emulator)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Terminator</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/ITerm2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">iTerm2</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/ConEmu\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ConEmu</a></li>\n</ul>\n<h2>Modo não-interativo</h2>\n<p>No modo não-interativo, o shell recebe comandos de um arquivo ou um <em>pipe</em> e executa eles. Quando o interpretador chega no final do arquivo, a sessão de processamento do shell é terminada e o processo anterior é retornado.</p>\n<p>Use os seguintes comandos para executar o shell em modo não-interativo:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">. /path/to/script.sh\nbash /path/to/script.sh</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>No exemplo acima, <code class=\"language-text\">script.sh</code> é apenas um arquivo de texto comum, contendo comandos, que o interpretador shell pode executar. <code class=\"language-text\">sh</code> ou <code class=\"language-text\">bash</code> são interpretadores utilizados pelo shell. Você pode criar um <code class=\"language-text\">script.sh</code> usando seu editor de texto preferido (e.g. vim, nano, Sublime Text, Atom, etc).</p>\n<p>Você também pode simplificar a invocação do script transformando o arquivo em um executável usando o comando <code class=\"language-text\">chmod</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">chmod +x /path/to/script.sh</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Além disso, a primeira linha do script deve indicar qual programa deve ser usado para executar o arquivo, como:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello, world!\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Ou, se você preferir usar <code class=\"language-text\">sh</code> ao invés do <code class=\"language-text\">bash</code>, mude <code class=\"language-text\">#!/bin/bash</code> para <code class=\"language-text\">#!/bin/sh</code>. Essa sequência de carácteres <code class=\"language-text\">#!</code>, é conhecida como <a href=\"http://en.wikipedia.org/wiki/Shebang_%28Unix%29\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">shebang</a>. Agora você pode executar scripts da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">/path/to/script.sh</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Um truque útil que usamos acima, é usar o comando <code class=\"language-text\">echo</code> para imprimir o texto na tela do terminal.</p>\n<p>Uma outra maneira de usar o <em>shebang</em> é:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello, world!\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>A vantagem desse modo de uso do <em>shebang</em> é que ele irá utilizar o programa (nesse caso o <code class=\"language-text\">bash</code>) baseado no caminho <code class=\"language-text\">PATH</code> do seu ambiente. Esse modo é, muitas vezes, preferido, ao invés de usar o primeiro método mostrado acima, onde a localização do programa no seu ambiente, pode não ser a mesmo. Isso também é útil se a variável <code class=\"language-text\">PATH</code>, em um sistema, estiver configurada para uma versão diferente do programa. Um exemplo, seria a instalação de uma nova versão do <code class=\"language-text\">bash</code>, enquanto preservamos a versão original e inserimos a localização da nova versão na variável <code class=\"language-text\">PATH</code> do sistema. O uso do <code class=\"language-text\">#!/bin/bash</code> pode resultar no uso da versão original do <code class=\"language-text\">bash</code>, enquanto, <code class=\"language-text\">#!/usr/bin/env bash</code>, fará uso da nova versão.</p>\n<h2>Códigos de saída</h2>\n<p>Todo comando retorna um <strong>código de sáida</strong> (<strong>retornando o estado</strong> ou o <strong>estado de saída</strong>). Um comando executado com sucesso, sempre retorna <code class=\"language-text\">0</code> (código-zero), e um comando executado com falha, sempre retorna um valor não-zero (código de erro). Códigos de falhas devem conter um número inteiro positivo entre 1 e 255.</p>\n<p>Outro comando útil que nós podemos usar quando escrevemos scripts é o <code class=\"language-text\">exit</code>. Esse omando é usado para finalizar a execução atual e retornar um código de saída para o shell. Executando o <code class=\"language-text\">exit</code>, sem nenhum argumento, irá terminar o script que está em processamento e retornar o código de saída do último comando executado antes do <code class=\"language-text\">exit</code>.</p>\n<p>Quando um programa é finalizado, o shell atribui ao seu <strong>código de saída</strong> há variável <code class=\"language-text\">$?</code>. A variável <code class=\"language-text\">$?</code>, é o que normalmente usamos para testar se um script foi executado com sucesso ou não.</p>\n<p>Do mesmo modo que podemos usar <code class=\"language-text\">exit</code> para terminar um script, nós podemos usar o comando <code class=\"language-text\">return</code> para sair de uma função e retornar o <strong>código de saída</strong> para quem invocou essa função. Você também pode usar <code class=\"language-text\">exit</code> dentro de uma função, isso irá resultar na saída da função <em>e</em> na finalização do programa.</p>\n<h1>Comentários</h1>\n<p>Scripts podem conter <em>comentários</em>. Comentários são declarações especiais ignoradas pelo interpretador do <code class=\"language-text\">shell</code>. O início de um comentário deve conter o símbolo <code class=\"language-text\">#</code> e continuar até o final da linha.</p>\n<p>Por exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\"># Esse script irá imprimir seu nome de usuário.</span>\n<span class=\"token function\">whoami</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p><strong>Dica</strong>: Use comentários para explicar o que seu script faz e <em>porque</em>.</p>\n</blockquote>\n<h1>Variáveis</h1>\n<p>Como na maioria das linguages de programação, você pode criar variáveis no bash.</p>\n<p>Bash não conhece nenhum tipo de dados. Variáveis podem conter apenas números ou <em>strings</em>. Existem três tipos de variáveis que você pode criar: variáveis locais, variáveis de ambiente e variáveis de <em>parâmetros posicionados</em>.</p>\n<h2>Variáveis locais</h2>\n<p><strong>Variáveis locais</strong> são variáveis que existem apenas no contido script. Elas são inacessíveis para outros programas ou scripts.</p>\n<p>Uma variável local pode ser declarada usando o sinal <code class=\"language-text\">=</code> (como regra, <strong>não deve</strong> conter nenhum espaço entre o nome da variável, <code class=\"language-text\">=</code> e o seu valor) e seu valor pode ser acessado usando o sinal <code class=\"language-text\">$</code>. Por exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token assign-left variable\">username</span><span class=\"token operator\">=</span><span class=\"token string\">\"pauloluan\"</span>    <span class=\"token comment\"># declarando a variável</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$username</span>          <span class=\"token comment\"># imprimindo seu valor</span>\n<span class=\"token builtin class-name\">unset</span> username          <span class=\"token comment\"># deletando a variável</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Nós podemos declarar uma variável local para uma única função usando a declaração <code class=\"language-text\">local</code>. Com isso, a variável será automaticamente deletada quando a função terminar de ser executada.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">local</span> <span class=\"token assign-left variable\">local_var</span><span class=\"token operator\">=</span><span class=\"token string\">\"Sou uma variável local\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>Variáveis de ambiente</h2>\n<p><strong>Variáveis de ambiente</strong> são variáveis que podem ser acessadas por qualquer programa ou script sendo executado na sessão atual do shell. Elas são criadas como variáveis locais, mas usando a declaração <code class=\"language-text\">export</code> no início delas.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GLOBAL_VAR</span><span class=\"token operator\">=</span><span class=\"token string\">\"Sou uma variável global\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Existem <em>muitas</em> variáveis globais no bash. Você vai conhecer elas no decorrer do seu dia-a-dia, mas aqui você encontra uma tabela com as mais utilizadas:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Variáveis</th>\n<th align=\"left\">Descrição</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"language-text\">$HOME</code></td>\n<td align=\"left\">O diretório inicial do usuário atual.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">$PATH</code></td>\n<td align=\"left\">Uma lista separada por dois pontos <code class=\"language-text\">[:]</code> dos diretários que o shell irá procurar por comandos.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">$PWD</code></td>\n<td align=\"left\">O diretório atual.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">$RANDOM</code></td>\n<td align=\"left\">Número inteiro randômico entre 0 e 32767.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">$UID</code></td>\n<td align=\"left\">Versão numérica do ID do usuário atual.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">$PS1</code></td>\n<td align=\"left\">Sequência primária do seu prompt de comando.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">$PS2</code></td>\n<td align=\"left\">Sequência secundária do seu prompt de comando.</td>\n</tr>\n</tbody>\n</table>\n<p>Entre <a href=\"http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_02.html#sect_03_02_04\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nesse link</a> para ver uma lista extendida de variáveis de ambiente do Bash.</p>\n<h2>Parâmetros de posição</h2>\n<p><strong>Parâmetros de posição</strong> são variáveis alocadas aos parâmetros de uma função quando ela é executada. A seguinte tabela mostra os parâmetros de posição e outras variáveis especiais e quais os seus significados dentro da função.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Parâmetro</th>\n<th align=\"left\">Descrição</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"language-text\">$0</code></td>\n<td align=\"left\">Nome do script.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">$1 … $9</code></td>\n<td align=\"left\">Os parâmetros passados de 1 há 9.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">${10} … ${N}</code></td>\n<td align=\"left\">Os parâmetros passados de 10 há N.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">$*</code> or <code class=\"language-text\">$@</code></td>\n<td align=\"left\">Todos os parâmetros passados, exceto <code class=\"language-text\">$0</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">$#</code></td>\n<td align=\"left\">A soma da quantidade de parâmetros foi passada, não contando <code class=\"language-text\">$0</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">$FUNCNAME</code></td>\n<td align=\"left\">O nome da função (retornada como valor, apenas dentro da função).</td>\n</tr>\n</tbody>\n</table>\n<p>No exemplo abaixo, os parâmetros posicinais serão <code class=\"language-text\">$0=&#39;./script.sh&#39;</code>,  <code class=\"language-text\">$1=&#39;foo&#39;</code> e <code class=\"language-text\">$2=&#39;bar&#39;</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">./script.sh foo bar</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Variáveis também podem ter um valor <em>padrão</em>. Nós podemos definir isso usando a sintaxe:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"> <span class=\"token comment\"># se a variável estiver vazia, atribua o valor padrão</span>\n<span class=\"token builtin class-name\">:</span> <span class=\"token variable\">${VAR<span class=\"token operator\">:=</span>'default'}</span>\n<span class=\"token builtin class-name\">:</span> <span class=\"token variable\">${$1<span class=\"token operator\">:=</span>'first'}</span>\n<span class=\"token comment\"># ou</span>\n<span class=\"token assign-left variable\">FOO</span><span class=\"token operator\">=</span><span class=\"token variable\">${FOO<span class=\"token operator\">:-</span>'default'}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>Expansões do shell</h1>\n<p><em>Expansões</em> são realizadas na linha de comando após ela ser separada em <em>símbolos</em>. Em outras palavras, expansões são mecânismos para calcular operações aritméticas, salvar resultados de execuções de comandos e assim por diante.</p>\n<p>Se você estiver interessado, você pode ler <a href=\"https://www.gnu.org/software/bash/manual/bash.html#Shell-Expansions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mais sobre expansões do shell</a>.</p>\n<h2>Expansões de suporte</h2>\n<p>Expansões de suporte nos permite criar <em>strings</em> arbitrárias. É parecido com <em>expansão de nomes de arquivos</em>. Por exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> bat<span class=\"token punctuation\">{</span>i,a,u<span class=\"token punctuation\">}</span>ta <span class=\"token comment\"># batita batata batuta</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Expansões também podem ser usadas para criar extensões numéricas, que podem ser iterados em um <em>loop</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span> <span class=\"token comment\"># 0 1 2 3 4 5</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">{</span>00<span class=\"token punctuation\">..</span><span class=\"token number\">8</span><span class=\"token punctuation\">..</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span> <span class=\"token comment\"># 00 02 04 06 08</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h2>Substituição de comandos</h2>\n<p>Substituição de comandos nos permite avaliar um comando e substituir seus valores em outro comando ou atribuição de variável. Substituição de comandos é realizado quando um comando é anexado por <code class=\"language-text\">``</code> ou <code class=\"language-text\">$()</code>.  Por exemplo, podemos usar isso da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token assign-left variable\">now</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">date</span> +%T<span class=\"token variable\">`</span></span> <span class=\"token comment\"># horário atual</span>\n<span class=\"token comment\"># ou</span>\n<span class=\"token assign-left variable\">now</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%T<span class=\"token variable\">)</span></span> <span class=\"token comment\"># horário atual</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$now</span> <span class=\"token comment\"># 19:08:26</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Expansões aritiméticas</h2>\n<p>No bash, somos livres para fazer qualquer operação aritmética. Mas, expressões devem ser anexadas por <code class=\"language-text\">$(( ))</code>. O formato da operação aritmética é:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token assign-left variable\">result</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span> <span class=\"token punctuation\">((</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token variable\">))</span></span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$result</span> <span class=\"token comment\"># 9</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Dentro de expressões aritméticas, variáveis geralmente deverm ser usadas sem o prefixo <code class=\"language-text\">$</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">4</span>\n<span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token number\">7</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span> x <span class=\"token operator\">+</span> y <span class=\"token variable\">))</span></span>     <span class=\"token comment\"># 11</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span> <span class=\"token operator\">++</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">++</span> <span class=\"token variable\">))</span></span> <span class=\"token comment\"># 12</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span> x <span class=\"token operator\">+</span> y <span class=\"token variable\">))</span></span>     <span class=\"token comment\"># 13</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Aspas simples e duplas</h2>\n<p>Existe uma importante diferença entre aspas simples e duplas. Dentro das aspas duplas, variáveis ou comandos podem ser expandidos. Dentro de aspas simples não. Por exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Seu diretório inicial: <span class=\"token environment constant\">$HOME</span>\"</span> <span class=\"token comment\"># Seu diretório inicial: /Users/&lt;username></span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Seu diretório inicial: <span class=\"token environment constant\">$HOME</span>'</span> <span class=\"token comment\"># Seu diretório inicial: $HOME</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Tome cuidado ao expandir variáveis locais ou de ambiente dentro de aspas se eles contiverem espaços em branco. Um exemplo disso, considere o uso do <code class=\"language-text\">echo</code> para imprimir algo:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token assign-left variable\">INPUT</span><span class=\"token operator\">=</span><span class=\"token string\">\"Uma frase  com   estranhos    espaços em branco.\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$INPUT</span>   <span class=\"token comment\"># Uma frase com estranhos espaços em branco.</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$INPUT</span>\"</span> <span class=\"token comment\"># Uma frase  com   estranhos    espaços em branco.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>O primeiro <code class=\"language-text\">echo</code> será invocado com 7 argumentos separados - $INPUT é separado em cada palavra, <code class=\"language-text\">echo</code> imprimi um único espaço em branco entre cada palavra. No segundo caso, <code class=\"language-text\">echo</code> é invocado com um único argumento (todo o valor do $INPUT, includingo seus espaços em branco).</p>\n<p>Agora, considere um exemplo mais sério:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token assign-left variable\">FILE</span><span class=\"token operator\">=</span><span class=\"token string\">\"Minhas coisas favoritas.txt\"</span>\n<span class=\"token function\">cat</span> <span class=\"token variable\">$FILE</span>   <span class=\"token comment\"># tentará imprimir 3 arquivos: `Minhas`, `coisas` e `favoritas.txt`</span>\n<span class=\"token function\">cat</span> <span class=\"token string\">\"<span class=\"token variable\">$FILE</span>\"</span> <span class=\"token comment\"># imprimi 1 arquivo: `Minhas coisas favoritas.txt`</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Enquanto o problema desse exemplo pode ser resolvido apenas renomeando FILE para <code class=\"language-text\">Minhas-coisas-favoritas.txt</code>, considere a entrada do nome vindo de uma variável de ambiente, um parâmetro posicional ou o resultado de outro comando (<code class=\"language-text\">find</code>, <code class=\"language-text\">cat</code>, etc). Se a entrada <em>puder</em> conter espaços em branco, tome o cuidado de envolver a expansão em aspas.</p>\n<h1>Arrays</h1>\n<p>Como em qualquer outra linguagem de programação, um array no bash é uma variável que permite o armazenamento de múltiplos valores. No bash, arrays também são de base zero, ou seja, o primeiro elemento do array tem o íncide 0.</p>\n<p>Ao lidar com arrays, nós devemos tomar um cuidado especial com as variáveis de ambiente <code class=\"language-text\">IFS</code>. <strong>IFS</strong>, que significa <strong>Input Field Separator</strong>, em português, algo como, <strong>Separador dos campos de entrada</strong>, são os carácteres que separam os elementos dentro de um array. O valor padrão desses campos é um espaço em braco, <code class=\"language-text\">IFS=&#39; &#39;</code>.</p>\n<h2>Declarando array</h2>\n<p>Para criar um array no bash, você pode simplesmente atribuir o valor ao index da variável do array:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">frutas<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Maça\nfrutas<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Pera\nfrutas<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Banana</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>As variáveis de arrays também podem ser criadas a partir de uma atribuição composta, como:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token assign-left variable\">frutas</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Maça Pera Banana<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>Expansões de Array</h2>\n<p>Elementos individuais do array, são igualmente expansíveis como qualquer outra variável:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${frutas<span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>}</span> <span class=\"token comment\"># Pera</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Todo o array pode ser expansível usando <code class=\"language-text\">*</code> ou <code class=\"language-text\">@</code> no lugar do índice numérico:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${frutas<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>}</span> <span class=\"token comment\"># Maça Pera Banana</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${frutas<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>}</span> <span class=\"token comment\"># Maça Pera Banana</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Tem uma importante (e súbita) diferença entre as duas linhas acima: considere que um elemento do array tenha espaços em branco:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">fruta<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Maça\nfruta<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"Mamão papaia\"</span>\nfruta<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Banana</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Nós queremos imprimir cada elemento do array separadamente em uma nova linha, então, vamos tentar usar a função nativa <code class=\"language-text\">printf</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token variable\">${frutas<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>}</span>\n<span class=\"token comment\"># + Maça</span>\n<span class=\"token comment\"># + Mamão</span>\n<span class=\"token comment\"># + papaia</span>\n<span class=\"token comment\"># + Banana</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Porque o <code class=\"language-text\">Mamão</code> e <code class=\"language-text\">papaia</code> foram imprimidos em linhas separadas? Vamos tentar usando aspas:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">${frutas<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>}</span>\"</span>\n<span class=\"token comment\"># + Maça Mamão papaia Banana</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Agora, está tudo em uma linha só - isso não exatamente o que queremos! É aí que <code class=\"language-text\">${frutas[@]}</code> entra no jogo:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">${frutas<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>}</span>\"</span>\n<span class=\"token comment\"># + Maça</span>\n<span class=\"token comment\"># + Mamão papaia</span>\n<span class=\"token comment\"># + Banana</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dentro das aspas duplas, <code class=\"language-text\">${frutas[@]}</code> é expandido separadamente para cada elemento do array, com seus espaços em branco preservados.</p>\n<h2>Separando Array</h2>\n<p>Além disso, você pode extrair um pedaço do array usando os operadores:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${frutas<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>0<span class=\"token operator\">:</span>2}</span> <span class=\"token comment\"># Maça Mamão papaia</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>No exemplo acima, <code class=\"language-text\">${frutas[@]}</code> é expandido com todo o conteúdo do seu array, e <code class=\"language-text\">:0:2</code>, extraí o pedaço de tamanho 2, começando no índice 0.</p>\n<h2>Adicionando elementos no Array</h2>\n<p>Adicionar elementos no array é bem simples. Atribuições compostas são extremamente úteis nesse caso. Você pode fazer uso dessa maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token assign-left variable\">frutas</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Laranja <span class=\"token string\">\"<span class=\"token variable\">${frutas<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>}</span>\"</span> Melão Ameixa<span class=\"token punctuation\">)</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${frutas<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>}</span> <span class=\"token comment\"># Laranja Maça Mamão papaia Banana Melão Ameixa</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>No exemplo acima, <code class=\"language-text\">${frutas[@]}</code> é expandido com todo o conteúdo do seu array e é atribuido ao novo valor dentro do array <code class=\"language-text\">frutas</code>, sendo assim, mutando seu valor original.</p>\n<h2>Deletando elementos de um Array</h2>\n<p>Para deletar um elemento de um array, use o comando <code class=\"language-text\">unset</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">unset</span> frutas<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># Deleta o item Laranja</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${frutas<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>}</span> <span class=\"token comment\"># Maça Mamão papaia Banana Melão Ameixa</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h1>Streams, pipes e listas</h1>\n<p>Bash tem uma poderosa ferramente para trabalhar com outros programas e seus resultados. Usando <em>streams</em> nós podemos enviar o resultado de um programa para outro programa ou arquivo, e assim, gravar logs ou fazer qualquer coisa que quisermos.</p>\n<p><em>Pipes</em> te dá a oportunidade de transportar e controlar a execução de comandos.</p>\n<p>É fundamental o entendimento de como usar essa poderosa e sofisticada ferramenta do Bash.</p>\n<h2>Streams</h2>\n<p>Ao executar qualquer comando no Bash, ele recebe esses dados como parâmetros e envia uma sequência ou <em>streams</em> de caracteres. Esses <em>streams</em> podem ser redirecionados em arquivos ou em outro <em>stream</em>.</p>\n<p>Existem três tipos de saídas de dados, conhecidos como <em>descritores</em>:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Código</th>\n<th align=\"center\">Descritor</th>\n<th align=\"left\">Descrição</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code class=\"language-text\">0</code></td>\n<td align=\"center\"><code class=\"language-text\">stdin</code></td>\n<td align=\"left\">O padrão de entrada de dados.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">1</code></td>\n<td align=\"center\"><code class=\"language-text\">stdout</code></td>\n<td align=\"left\">O padrão de saída de dados.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">2</code></td>\n<td align=\"center\"><code class=\"language-text\">stderr</code></td>\n<td align=\"left\">O padrão de saída de erros.</td>\n</tr>\n</tbody>\n</table>\n<p>Redirecionamento torna possível o controle de onde a saída do comando vai parar, e, de onde a entrada de dados veem. Para redirecionar <em>streams</em>, você pode usar esses operadores:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Operadores</th>\n<th align=\"left\">Descrição</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code class=\"language-text\">&gt;</code></td>\n<td align=\"left\">Redireciona a saída de dados</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">&amp;&gt;</code></td>\n<td align=\"left\">Redireciona a saída de dados e de erros</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">&amp;&gt;&gt;</code></td>\n<td align=\"left\">Anexa o redirecionamento de saída e erros</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">&lt;</code></td>\n<td align=\"left\">Redireciona a entrada de dados</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">&lt;&lt;</code></td>\n<td align=\"left\">Sintaxe do comando <a href=\"http://tldp.org/LDP/abs/html/here-docs.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">“Here documents”</a></td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">&lt;&lt;&lt;</code></td>\n<td align=\"left\">Sintaxe do comando <a href=\"http://www.tldp.org/LDP/abs/html/x17837.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">“Here strings”</a></td>\n</tr>\n</tbody>\n</table>\n<p>Veja aqui alguns exemplos de redirecionamento:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># a saída do comando `ls` será escrita no arquivo lista.txt</span>\n<span class=\"token function\">ls</span> -l <span class=\"token operator\">></span> lista.txt\n\n<span class=\"token comment\"># adiciona a saída do comando no final do arquivo lista.txt</span>\n<span class=\"token function\">ls</span> -a <span class=\"token operator\">>></span> lista.txt\n\n<span class=\"token comment\"># todos os erros serão escritos no arquivo erros.txt</span>\n<span class=\"token function\">grep</span> da * <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> erros.txt\n\n<span class=\"token comment\"># lê o arquivo erros.txt</span>\n<span class=\"token function\">less</span> <span class=\"token operator\">&lt;</span> errors.txt</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Pipes</h2>\n<p>Nós podemos redirecionar os <em>streams</em> padrões não apenas para arquivos, mas também, para outros programas. <strong>Pipes</strong> nos permite usar a saída de um programa, como entrada de outro.</p>\n<p>No exemplo abaixo, <code class=\"language-text\">comando1</code> envia sua saída para <code class=\"language-text\">comando2</code>, que então passa sua saída como entrada para <code class=\"language-text\">comando3</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">comando1 | comando2 | comando3</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Construções como essa, são chamadas de <strong>pipelines</strong>.</p>\n<p>Na prática, isso pode ser usado para processar dados através de vários programas. Por exemplo, no exemplo a seguir, a saída do <code class=\"language-text\">ls -l</code> é enviada para o comando <code class=\"language-text\">grep</code>, que então imprimi apenas os arquivos que tenham a extensão <code class=\"language-text\">.md</code>, e sua saída, é finalmente enviada para o comando <code class=\"language-text\">less</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">ls -l | grep .md$ | less</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>Lista de comandos</h2>\n<p>Uma <strong>lista de comandos</strong> é uma sequência de um ou mais <em>pipelines</em> separados pelos operadores <code class=\"language-text\">;</code>, <code class=\"language-text\">&amp;</code>, <code class=\"language-text\">&amp;&amp;</code> ou <code class=\"language-text\">||</code>.</p>\n<p>Se um comando termina com um operador <code class=\"language-text\">&amp;</code>, o shell executará o comando asíncronamente através de um <em>subshell</em>. Em outras palavras, esse comando será executado em segundo plano (ou <em>background</em>).</p>\n<p>Comandos separados por <code class=\"language-text\">;</code> serão executados em sequência: um após o outro. O shell esperada a finalização de cada comando para executar o próximo.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># comando1 será executado após a finalização do comando1</span>\ncomando1 <span class=\"token punctuation\">;</span> comando2\n\n<span class=\"token comment\"># que é o mesmo que</span>\ncommand1\ncommand2</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Uma lista separada por <code class=\"language-text\">&amp;&amp;</code> e <code class=\"language-text\">||</code> são conhecidos também como listas <em>AND</em> e <em>OR</em>,</p>\n<p>Uma lista <em>AND</em> é parecida com isso:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># comando2 será executado se, e apenas se, o comando1 finalize seu processo com sucesso (retorando um estado de saída 0)</span>\ncomando1 <span class=\"token operator\">&amp;&amp;</span> comando2</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Uma lista <em>OR</em>  é parecida com isso:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># comando2 será executado se, e apenas se, o comando1 não finalize seu processo com sucesso (retornando um estado de saída não-zero)</span>\ncomando1 <span class=\"token operator\">||</span> comando2</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>O código retornado pelas listas <em>AND</em> ou <em>OR</em>, são o estado do último comando executado.</p>\n<h1>Operadores condicionais</h1>\n<p>Como em qualquer outra linguagem, as condicionais no Bash nos permitem decidir qual ação realizar. O resultado é determinado pela análise da expressão, que deverá ser conter <code class=\"language-text\">[[ ]]</code> em volta dela.</p>\n<p>Expressões condicionais podem conter os operadores <code class=\"language-text\">&amp;&amp;</code> e <code class=\"language-text\">||</code>, como vimos, <em>AND</em> e <em>OR</em>. Além disso, existem <a href=\"#express%C3%B5es-prim%C3%A1rias-e-combina%C3%A7%C3%A3o-de-express%C3%B5es\">várias outras expressões</a> que podem ser utilizadas.</p>\n<p>Existem duas condicionais diferentes: a condicional <code class=\"language-text\">if</code>, e a condicional <code class=\"language-text\">case</code>.</p>\n<h2>Expressões primárias e combinação de expressões</h2>\n<p>Expressões dentro do <code class=\"language-text\">[[ ]]</code> (ou <code class=\"language-text\">[ ]</code> para <code class=\"language-text\">sh</code>), são chamados de <strong>comandos de teste</strong> ou <strong>primários</strong>. Essas expressões ajudam a indicar o resultado de uma operação condicional. Nas tabelas abaixos, estamos usando <code class=\"language-text\">[ ]</code>, porque ele também funciona para <code class=\"language-text\">sh</code>. Para saber mais, <a href=\"http://serverfault.com/a/52050\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">veja aqui a diferença entre aspas simples e aspas duplas dentro dos colchetes no Bash.</a>.</p>\n<p><strong>Trabalhando com o sistema de arquivos:</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Primários</th>\n<th align=\"left\">Quer dizer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ -e FILE ]</code></td>\n<td align=\"left\"><em>true</em> se <code class=\"language-text\">FILE</code> existir, do inglês <em><strong>e</strong>xists</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ -f FILE ]</code></td>\n<td align=\"left\"><em>true</em> se <code class=\"language-text\">FILE</code> existir e for um arquivo normal, do inglês <em><strong>f</strong>ile</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ -d FILE ]</code></td>\n<td align=\"left\"><em>true</em> se <code class=\"language-text\">FILE</code> existir e for executável, do inglês <em><strong>d</strong>irectory</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ -s FILE ]</code></td>\n<td align=\"left\"><em>true</em> se <code class=\"language-text\">FILE</code> existir e não for vazio, seu tamanho é maior que 0, do inglês <em><strong>s</strong>ize</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ -r FILE ]</code></td>\n<td align=\"left\"><em>true</em> se <code class=\"language-text\">FILE</code> existir e for possível a leitura, do inglês <em><strong>r</strong>eadable</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ -w FILE ]</code></td>\n<td align=\"left\"><em>true</em> se <code class=\"language-text\">FILE</code> existir e for possível a escrita, do inglês <em><strong>w</strong>ritable</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ -x FILE ]</code></td>\n<td align=\"left\"><em>true</em> se <code class=\"language-text\">FILE</code> existir e for possíve executá-lo, do inglês <em>e<strong>x</strong>ecutable</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ -L FILE ]</code></td>\n<td align=\"left\"><em>true</em> se <code class=\"language-text\">FILE</code> existir e for um link simbólico, do inglês <em>symbolic <strong>l</strong>ink</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ FILE1 -nt FILE2 ]</code></td>\n<td align=\"left\">FILE1 é mais novo que FILE2, do inglês <em><strong>n</strong>ewer <strong>t</strong>han</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ FILE1 -ot FILE2 ]</code></td>\n<td align=\"left\">FILE1 é mais velho que FILE2, do inglês <em><strong>o</strong>lder <strong>t</strong>han</em>.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Trabalhando com <em>strings</em>:</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Primários</th>\n<th align=\"left\">Quer dizer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ -z STR ]</code></td>\n<td align=\"left\"><code class=\"language-text\">STR</code> é vazio, seu tamanho é zero, do inglês <em><strong>z</strong>ero</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ -n STR ]</code></td>\n<td align=\"left\"><code class=\"language-text\">STR</code> não é vazio, seu tamanho não é zero, do inglês <em><strong>n</strong>on-zero</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ STR1 == STR2 ]</code></td>\n<td align=\"left\"><code class=\"language-text\">STR1</code> e <code class=\"language-text\">STR2</code> são iguais.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ STR1 != STR2 ]</code></td>\n<td align=\"left\"><code class=\"language-text\">STR1</code> e <code class=\"language-text\">STR2</code> não são iguais.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Operadores aritiméticos binários:</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Primários</th>\n<th align=\"left\">Quer dizer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ ARG1 -eq ARG2 ]</code></td>\n<td align=\"left\"><code class=\"language-text\">ARG1</code> é igual ao <code class=\"language-text\">ARG2</code>, do inglês <em><strong>eq</strong>ual</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ ARG1 -ne ARG2 ]</code></td>\n<td align=\"left\"><code class=\"language-text\">ARG1</code> não é igual ao <code class=\"language-text\">ARG2</code>, do inglês <em><strong>n</strong>ot <strong>e</strong>qual</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ ARG1 -lt ARG2 ]</code></td>\n<td align=\"left\"><code class=\"language-text\">ARG1</code> é menor que <code class=\"language-text\">ARG2</code>, do inglês <em><strong>l</strong>ess <strong>t</strong>han</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ ARG1 -le ARG2 ]</code></td>\n<td align=\"left\"><code class=\"language-text\">ARG1</code> é menor ou igual que <code class=\"language-text\">ARG2</code>, do inglês <em><strong>l</strong>ess than or <strong>e</strong>qual</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ ARG1 -gt ARG2 ]</code></td>\n<td align=\"left\"><code class=\"language-text\">ARG1</code> é maior que <code class=\"language-text\">ARG2</code>, do inglês <em><strong>g</strong>reater <strong>t</strong>han</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ ARG1 -ge ARG2 ]</code></td>\n<td align=\"left\"><code class=\"language-text\">ARG1</code> é maior ou igual que <code class=\"language-text\">ARG2</code> <em><strong>g</strong>reater than or <strong>e</strong>qual</em>.</td>\n</tr>\n</tbody>\n</table>\n<p>Condicionais podem ser combinadas usando as <strong>expressões de combinação:</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Expressão</th>\n<th align=\"left\">Efeito</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ ! EXPR ]</code></td>\n<td align=\"left\"><em>true</em> se <code class=\"language-text\">EXPR</code> é falso.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ (EXPR) ]</code></td>\n<td align=\"left\">Retorna o valor da <code class=\"language-text\">EXPR</code>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ EXPR1 -a EXPR2 ]</code></td>\n<td align=\"left\">Operador lógico <em>AND</em>. <em>true</em> se <code class=\"language-text\">EXPR1</code> e <code class=\"language-text\">EXPR2</code> são verdadeiros, do inglês <em><strong>a</strong>nd</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">[ EXPR1 -o EXPR2 ]</code></td>\n<td align=\"left\">Operador lógico <em>OR</em>. <em>true</em> se <code class=\"language-text\">EXPR1</code> ou <code class=\"language-text\">EXPR2</code> são verdadeiros, do inglês <em><strong>o</strong>r</em>.</td>\n</tr>\n</tbody>\n</table>\n<p>Com certeza existem muitos outros comandos e expressões úteis para seu caso, você fácilmente encontra-los na <a href=\"http://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">página de manual do Bash</a>.</p>\n<h2>Usando a condicional <code class=\"language-text\">if</code></h2>\n<p>Declarações <code class=\"language-text\">if</code> funcionam da mesma maneira como em outras linguagens de programação. Se a expressão dentro dos colchetes for verdadeira, o codógio dentro do bloco <code class=\"language-text\">then</code> e até o <code class=\"language-text\">fi</code> será executado. <code class=\"language-text\">fi</code> indica o final de uma condicional a ser executada.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># única linha</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span> -eq <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># múltipla linha</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span> -eq <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span>\n<span class=\"token keyword\">fi</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Da mesma forma, podemos usar uma declaração <code class=\"language-text\">if..else</code>, como:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># única linha</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">2</span> -ne <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># múltipla linha</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">2</span> -ne <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span>\n<span class=\"token keyword\">fi</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As vezes, condicionais <code class=\"language-text\">if..else</code> não são suficientes para o que queremos fazer. Nesse caso, não devemos esquecer da existência da condicional <code class=\"language-text\">if..elif..else</code>, que sempre vêm a calhar.</p>\n<p>Veja o exemplo abaixo:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">uname</span><span class=\"token variable\">`</span></span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Adão\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Não coma a maça!\"</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">uname</span><span class=\"token variable\">`</span></span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Eva\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Não pegue a maça!\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Maças são deliciosas!\"</span>\n<span class=\"token keyword\">fi</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Usando a condicional <code class=\"language-text\">case</code></h2>\n<p>Se você estiver analisando várias possibilidades diferentes para ter ações diferentes, usar a condicional <code class=\"language-text\">case</code> pode ser mais útil do que várias condicionais <code class=\"language-text\">if</code> aninhadas. Veja abaixo um exemplo complexo de usando a condicional <code class=\"language-text\">case</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token keyword\">case</span> <span class=\"token string\">\"<span class=\"token variable\">$ext</span>\"</span> <span class=\"token keyword\">in</span>\n  <span class=\"token string\">\"jpg\"</span><span class=\"token operator\">|</span><span class=\"token string\">\"jpeg\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"É uma imagem com extensão jpg\"</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token string\">\"png\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"É uma imagem com extensão png\"</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token string\">\"gif\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"É uma imagem com extensão gif\"</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  *<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Oops! Não é uma imagem!\"</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>A condicional <code class=\"language-text\">case</code> verifica a expressão que corresponde a um padrão. O sinal <code class=\"language-text\">|</code> é usado para separar múltiplos padrões e o operador <code class=\"language-text\">)</code> finaliza a lista de padrões. A expressão <code class=\"language-text\">*</code> é o padrão para todo o restante que não corresponder a nenhum item das suas listas. Cada bloco de comandos deve ser separado pelo operador <code class=\"language-text\">;;</code>.</p>\n<h1>Loops</h1>\n<p>Aqui não teremos nenhuma surpresa. Assim como qualquer linguagem de programação, um loop no bash é um bloco de código que se repete enquanto a condição em controle for verdadeira.</p>\n<p>Existem quatro tipos de loops no Bash: <code class=\"language-text\">for</code>, <code class=\"language-text\">while</code>, <code class=\"language-text\">until</code> e <code class=\"language-text\">select</code>.</p>\n<h2><code class=\"language-text\">for</code> loop</h2>\n<p>O <code class=\"language-text\">for</code> é bem similar ao seu irmão em C. Ele se parece com:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">arg</span> <span class=\"token keyword\">in</span> elem1 elem2 <span class=\"token punctuation\">..</span>. elemN\n<span class=\"token keyword\">do</span>\n  <span class=\"token comment\"># código</span>\n<span class=\"token keyword\">done</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Durante cada etapa do loop, <code class=\"language-text\">arg</code> assume os valores de <code class=\"language-text\">elem1</code> até <code class=\"language-text\">elemN</code>. Valores também podem ser espaços reservados ou <a href=\"#expans%C3%B5es-de-suporte\">expansões de suporte</a>.</p>\n<p>E também podemos escrever o loop <code class=\"language-text\">for</code> em apenas uma linha, mas nesse caso, é preciso colocar um ponto e vírgula antes do <code class=\"language-text\">do</code>, como no exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>A propósito, se <code class=\"language-text\">for..in..do</code> parece um pouco estranho para você, você também pode escrever o <code class=\"language-text\">for</code> em estilo C, como a seguir:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span>\n<span class=\"token keyword\">done</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">for</code> é útil quando nós queremos fazer a mesma operação em cada arquivo em um diretório. Por exemplo, se precisamos mover todos os arquivos <code class=\"language-text\">.bash</code> dentro da pasta <code class=\"language-text\">script</code> e dar aos arquivos permissões de execução, nosso script será parecido com isso:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">FILE</span> <span class=\"token keyword\">in</span> <span class=\"token environment constant\">$HOME</span>/*.bash<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token function\">mv</span> <span class=\"token string\">\"<span class=\"token variable\">$FILE</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">${<span class=\"token environment constant\">HOME</span>}</span>/scripts\"</span>\n  <span class=\"token function\">chmod</span> +x <span class=\"token string\">\"<span class=\"token variable\">${<span class=\"token environment constant\">HOME</span>}</span>/scripts/<span class=\"token variable\">${FILE}</span>\"</span>\n<span class=\"token keyword\">done</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2><code class=\"language-text\">while</code> loop</h2>\n<p>O loop <code class=\"language-text\">while</code> testa uma condição e executa a sequência de comandos desde que a condição seja verdadeira. A condição não é nada mais que uma <a href=\"#express%C3%B5es-prim%C3%A1rias-e-combina%C3%A7%C3%A3o-de-express%C3%B5es\">expressão primária</a> usada também em <code class=\"language-text\">if..then</code>. Então, um loop <code class=\"language-text\">while</code> se parece com:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> condition <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token comment\"># código</span>\n<span class=\"token keyword\">done</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Tal como no caso do loop <code class=\"language-text\">for</code>, se quisermos escrever uma condição <code class=\"language-text\">do</code> na mesma linha, temos que usar um ponto e vírgula antes.</p>\n<p>Um exemplo prático seria:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n  <span class=\"token comment\"># Retorna o quadrado dos números de 0 à 9</span>\n<span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$x</span> -lt <span class=\"token number\">10</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token comment\"># valor de x é menor que 10</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span> x <span class=\"token operator\">*</span> x <span class=\"token variable\">))</span></span>\n  <span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token variable\">))</span></span> <span class=\"token comment\"># aumenta o x</span>\n<span class=\"token keyword\">done</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2><code class=\"language-text\">until</code> loop</h2>\n<p>O loop <code class=\"language-text\">until</code> é exatamente o oposto do loop <code class=\"language-text\">while</code>. Assim como o <code class=\"language-text\">while</code>, ele recebe uma condição teste, mas, só continua executando enquanto a condição for falsa:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token keyword\">until</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> cond <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token comment\"># código</span>\n<span class=\"token keyword\">done</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2><code class=\"language-text\">select</code> loop</h2>\n<p>O loop <code class=\"language-text\">select</code> nos ajuda a organizar um menu para o usuário. Ele tem quase a mesma sintaxe que o loop <code class=\"language-text\">for</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">respostas</span> <span class=\"token keyword\">in</span> elem1 elem2 <span class=\"token punctuation\">..</span>. elemN\n<span class=\"token keyword\">do</span>\n  <span class=\"token comment\"># código</span>\n<span class=\"token keyword\">done</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>O <code class=\"language-text\">select</code> imprimi todos os <code class=\"language-text\">elem1..elemN</code> na tela, junto de suas sequências numéricas, e depois disso, pergunta ao usuário. Normalmente, isso se parece com <code class=\"language-text\">$?</code> (a variável <code class=\"language-text\">PS3</code>). A resposta será salva em <code class=\"language-text\">respotas</code>. Se <code class=\"language-text\">respostas</code> for um número entre <code class=\"language-text\">1..N</code>, então o código será executado e <code class=\"language-text\">select</code> vai para a próxima iteração - isso porquê nós devemos usar a declaração <code class=\"language-text\">break</code>.</p>\n<p>Um exemplo prático se parece com esse:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PS3</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"Escolha uma gerenciador de pacotes: \"</span>\n<span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">ITEM</span> <span class=\"token keyword\">in</span> bower <span class=\"token function\">npm</span> gem pip\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\"Digite o nome de um de pacote: \"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">read</span> PACKAGE\n  <span class=\"token keyword\">case</span> <span class=\"token variable\">$ITEM</span> <span class=\"token keyword\">in</span>\n    bower<span class=\"token punctuation\">)</span> bower <span class=\"token function\">install</span> <span class=\"token variable\">$PACKAGE</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">npm</span><span class=\"token punctuation\">)</span>   <span class=\"token function\">npm</span>   <span class=\"token function\">install</span> <span class=\"token variable\">$PACKAGE</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    gem<span class=\"token punctuation\">)</span>   gem   <span class=\"token function\">install</span> <span class=\"token variable\">$PACKAGE</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    pip<span class=\"token punctuation\">)</span>   pip   <span class=\"token function\">install</span> <span class=\"token variable\">$PACKAGE</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">esac</span>\n  <span class=\"token builtin class-name\">break</span> <span class=\"token comment\"># evita loops infinitos</span>\n<span class=\"token keyword\">done</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Esse example pergunta ao usuário qual gerenciador de pacote ele deseja usar. E em seguida, quais pacotes gostaríamos de instalar e finalmente, executa o processo de instalação.</p>\n<p>Se rodarmos isso, teremos:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ ./my_script\n1) bower\n2) npm\n3) gem\n4) pip\nEscolha uma gerenciador de pacotes: 2\nDigite o nome de um de pacote: bash-handbook\n&lt;installing bash-handbook&gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Controlando o loop</h2>\n<p>Existem situações onde precisamos parar o loop antes da sua finalização normal ou pular uma iteração. Nesses casos, nós podemos usar as declarações <code class=\"language-text\">break</code> e <code class=\"language-text\">continue</code>, que são nativas do shell. Ambos funcionam com qualquer tipo de loop.\nThere are situations when we need to stop a loop before its normal ending or step over an iteration. In these cases, we can use the shell built-in <code class=\"language-text\">break</code> and <code class=\"language-text\">continue</code> statements. Both of these work with every kind of loop.</p>\n<p>A declaração <code class=\"language-text\">break</code> é usada para sair do loop atual antes da sua finalização. Nós já o conhecemos.\nThe <code class=\"language-text\">break</code> statement is used to exit the current loop before its ending. We have already met with it.</p>\n<p>A delcaração <code class=\"language-text\">continue</code> pula uma iteração. Podemos usa-la desse modo:\nThe <code class=\"language-text\">continue</code> statement steps over one iteration. We can use it as such:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">$((</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token variable\">))</span></span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span>\n<span class=\"token keyword\">done</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Se você rodar o exemplo acima, ele vai imprimir os números ímpares de 0 à 9.\nIf we run the example above, it will print all odd numbers from 0 through 9.</p>\n<h1>Funções</h1>\n<p>Em scripts, nós temos a habilidade de definir e chamar funções. Assim como em qualquer linguagem de programação, funções no bash são pedaços de códigos, mas elas são tratadas um pouquinho diferentes.</p>\n<p>No bash, funções são sequências de comandos agrupados sob um mesmo nome, e esse nome, é o nome da função. Chamar uma função é o mesmo que chamar qualquer outro programa, você escreve o nome da função e ela será invocada.</p>\n<p>Podemos declarar funções dessa maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function-name function\">my_func</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># código</span>\n<span class=\"token punctuation\">}</span>\n\nmy_func <span class=\"token comment\"># invoca função</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Devemos declarar a função antes de invoca-la.</p>\n<p>Funções podem receber argumentos e retornar um resultado - o código de saída. Argumentos, em funções, são tratados da mesma maneira que os argumentos dados ao script no <a href=\"#modo-n%C3%A3o-interativo\">modo não-interativo</a> - usando os <a href=\"#par%C3%A2metros-de-posi%C3%A7%C3%A3o\">parâmetros de posição</a>. O resultado pode ser retornado usando o comando <code class=\"language-text\">return</code>.</p>\n<p>Abaixo é uma função que recebe um nome e retorna <code class=\"language-text\">0</code>, indicando que foi executado com sucesso.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># function with params</span>\n<span class=\"token function-name function\">bemVindo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -n <span class=\"token variable\">$1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Bem-vindo, <span class=\"token variable\">$1</span>!\"</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Bem-vindo, desconhecido!\"</span>\n  <span class=\"token keyword\">fi</span>\n  <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n\nbemVindo Eduardo  <span class=\"token comment\"># Hello, Eduardo!</span>\nbemVindo        <span class=\"token comment\"># Hello, desconhecido!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Nós já falamos sobre <a href=\"#c%C3%B3digos-de-sa%C3%ADda\">códigos de saída</a>. O comando <code class=\"language-text\">return</code> sem argumentos retorna o código de saída do último comando executado. Acima, <code class=\"language-text\">return 0</code> vai retornar o código bem sucedido, <code class=\"language-text\">0</code>.</p>\n<h2>Depurando</h2>\n<p>O shell nós dá ferramentas para depurar nossos scripts. Se você quer rodar um script em modo de depuração, nós usamos um modo especial em nosso <em>shebang</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash options</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Esse <code class=\"language-text\">options</code> é a configuração que muda o comportamento do shell. A tabela abaixo mostra uma lista de opções que podem ser úteis para você:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Atalho</th>\n<th align=\"left\">Nome</th>\n<th align=\"left\">Descrição</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code class=\"language-text\">-f</code></td>\n<td align=\"left\">noglob</td>\n<td align=\"left\">Desativa expanção de nome de arquivos, em inglês, <em>globbing</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">-i</code></td>\n<td align=\"left\">interactive</td>\n<td align=\"left\">Script roda no modo <em>interativo</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">-n</code></td>\n<td align=\"left\">noexec</td>\n<td align=\"left\">Lê comandos, mas não os executa (verifica a sintaxe).</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">-t</code></td>\n<td align=\"left\">—</td>\n<td align=\"left\">Saí da execução depois do primeiro comando.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">-v</code></td>\n<td align=\"left\">verbose</td>\n<td align=\"left\">Imprimi cada comando no <code class=\"language-text\">stderr</code> antes de executa-los.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">-x</code></td>\n<td align=\"left\">xtrace</td>\n<td align=\"left\">Imprimi cada comando e expande seus argumentos e envia para o <code class=\"language-text\">stderr</code> antes de executa-los.</td>\n</tr>\n</tbody>\n</table>\n<p>Por exemplo, podemos ter scripts com <code class=\"language-text\">-x</code> como opção, assim como:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash -x</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span>\n<span class=\"token keyword\">done</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Isso vai imprimir o valor das variáveis para o <code class=\"language-text\">stdout</code> junto de outras informações úteis:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ ./my_script\n+ (( i = 0 ))\n+ (( i &lt; 3 ))\n+ echo 0\n0\n+ (( i++  ))\n+ (( i &lt; 3 ))\n+ echo 1\n1\n+ (( i++  ))\n+ (( i &lt; 3 ))\n+ echo 2\n2\n+ (( i++  ))\n+ (( i &lt; 3 ))</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As vezes nós precisamos depurar uma parte do script. Nesse caso, usar o comando <code class=\"language-text\">set</code> é mais conveniente. Esse comando habilita e desabilita opções. Opções são desabilitadas usando <code class=\"language-text\">-</code> e habilitadas usando <code class=\"language-text\">+</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"xtrace está desabilitado\"</span>\n<span class=\"token builtin class-name\">set</span> -x\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"xtrace está habilitado\"</span>\n<span class=\"token builtin class-name\">set</span> +x\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"xtrace foi desabilitado novamente\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>Posfácio</h1>\n<p>Eu espero que esse pequeno guia tenha sido interação e tenha te ajudado a entender um pouco mais sobre o Bash. Para ser honesto, eu escrevi esse guia para mim mesmo, para assim, não esquecer o básico do bash. Eu tentei escrever de uma maneira concisa, mas significativamente útil e eu espero que você tenha gostado.</p>\n<p>Esse guia narra minha própria experiência com o Bash. Ele não tem foco de abranger toda as funcionalidades, e, se você quiser saber mais, pode começar através do <code class=\"language-text\">man bash</code>.</p>\n<p>Contribuições são absolutamente bem-vindas, e eu ficarei grato por qualquer correção ou perguntas que você vier a ter e me enviar. Para isso, crie uma <a href=\"https://github.com/denysdovhan/bash-handbook/issues\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nova issue no repositorio original</a>.</p>\n<p>Obrigado por ler esse guia de bolso!</p>\n<h1>Licença</h1>\n<p>Esta apostila incrível foi escrita originalmente pelo © <a href=\"http://denysdovhan.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Denys Dovhan</a> e está licenciada nos termos (CC 4.0)<a href=\"http://creativecommons.org/licenses/by/4.0/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://img.shields.io/badge/License-CC%20BY%204.0-lightgrey.svg?style=flat-square\" alt=\"CC 4.0\"></a> O que permitiu com que nós traduzissemos, adaptássemos e redistribuissemos esse conhecimento! Nosso eternos agradecimento a ele!</p>\n<hr>\n<p><a href=\"http://bit.ly/pauloluan-insta\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_qQqH59e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jzrvlwsqdrz7j5wgtxb.png\" alt=\"Instagram Paulo Luan\"></a></p>\n<hr>","frontmatter":{"title":"Linux: Apostila Completa de Bash","date":"February 03, 2021","description":"Bash: Apostila completa"}}},"pageContext":{"slug":"/linux_bash_handbook/","previous":{"fields":{"slug":"/naming_practices/"},"frontmatter":{"title":"Como nomear variáveis?"}},"next":{"fields":{"slug":"/questions/testes/"},"frontmatter":{"title":"Preparatório de perguntas de QA"}}}},"staticQueryHashes":["1061827086","63159454"]}